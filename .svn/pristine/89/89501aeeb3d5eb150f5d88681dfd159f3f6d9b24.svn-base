//
//  PersonalInfoViewController.m
//  LFBaseFrameTwo
//
//  Created by yongda sha on 16/12/24.
//  Copyright © 2016年 admin. All rights reserved.
//

#import "PersonalInfoViewController.h"
#import "PersonalInfoView.h"
#import <UIImageView+WebCache.h>
#import "SelectByWindowView.h"
#import "ChangeNickNameViewController.h"
#import "ChangeSexViewController.h"

#import "WXApi.h"
#import "WXApiManager.h"
#import "WXUserDefaults.h"

#import <TencentOpenAPI/TencentOAuth.h>
#import <TencentOpenAPI/TencentApiInterface.h>
#import <TencentOpenAPI/QQApiInterface.h>

@interface PersonalInfoViewController ()<UIImagePickerControllerDelegate,UINavigationControllerDelegate,
                                        UITableViewDataSource,UITableViewDelegate,TencentSessionDelegate, WXApiManagerDelegate>
{
    //用户信息单例
    UserInformation *userInfo;
    
    //视图View
    PersonalInfoView *baseView;
    
    //选择的tableview
    SelectByWindowView *selectView;
    
    //省市区选择标志位，(0-省份，1-城市，2-区县)
    NSInteger addressFlag;
    
    //省
    NSString *province;
    NSString *provinceCode;
    //市
    NSString *city;
    NSString *cityCode;
    //县
    NSString *county;
    NSString *countyCode;
    
    //省份信息的数据源
    NSDictionary *provinceDic;
    //城市信息的数据源
    NSMutableDictionary *cityDic;
    //地区信息的数据源
    NSMutableDictionary *countyDic;
    
    //记录地址被点击的次数
    NSInteger addRNum;
    
    //QQ第三方登录对象
    TencentOAuth *tencentOAuth;
    //QQ登录的权限列表
    NSArray *permissions;
    
}
@end

@implementation PersonalInfoViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view from its nib.
    
    //初始化
    userInfo = [UserInformation sharedInstance];
    
    //导航栏标题
    self.navigationItem.title = @"基本信息";
    self.view.backgroundColor=Background_Color;
    
    baseView = [PersonalInfoView viewFromNIB];
    baseView.frame = CGRectMake(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT - 64);
    
    //给VC添加滑动视图
    UIView *originalView = baseView;
    CGRect originalFrame = CGRectMake(0, 74, SCREEN_WIDTH, SCREEN_HEIGHT-74);
    [self addScrollViewForXib:originalView withFrame:originalFrame];
    
    if ([self.userInfo.HeadIcon isEqualToString:@""] || self.userInfo.HeadIcon == nil) {
        //无自定义头像，则使用默认头像
        baseView.imageHead.image = [UIImage imageNamed:@"defaultHead"];
    } else {
        //有自定义头像，则下载并显示
        NSString *urlStr = [NSString stringWithFormat:@"%@%@",Image_Base_URL,self.userInfo.HeadIcon];
        NSURL *imageUrl = [NSURL URLWithString:urlStr];
        [baseView.imageHead sd_setImageWithURL:imageUrl placeholderImage:[UIImage imageNamed:@"loadfail-0"] options:SDWebImageRetryFailed];
    }
    
    // 昵称
    [baseView.nickNameBtn addTarget:self action:@selector(changeNickName:) forControlEvents:UIControlEventTouchUpInside];
    baseView.nickNameLabel.text = userInfo.NickName;
    
    //ID编号
    baseView.labelID.text = self.userInfo.EnCode;
    
    
    // 性别不可更改
    if ([self.userInfo.Gender isEqualToString:@""] || self.userInfo.Gender == nil) {//根据身份证判断性别
        
        if (![self.userInfo.IDCard isEqualToString:@""] || self.userInfo.IDCard != nil) {
            
            baseView.labelSex.text= [SmallFunctionTool lockIdString:self.userInfo.IDCard];
        }else{
            baseView.labelSex.text=@"未设置";
        }

    } else{
        //性别
        baseView.labelSex.text=self.userInfo.Gender;
    }
    
    if ([self.userInfo.RealName isEqualToString:@""] || self.userInfo.RealName == nil) {
        baseView.labelRealName.text=@"未设置";
    } else{
        //真实姓名
        baseView.labelRealName.text = [NSString stringWithFormat:@"%@ %@", userInfo.IDCard, userInfo.RealName];
    }
    
    [baseView.btnImageHead addTarget:self action:@selector(btnImageHead:) forControlEvents:UIControlEventTouchUpInside];
    [baseView.btnAddress addTarget:self action:@selector(btnAddress:) forControlEvents:UIControlEventTouchUpInside];
    // 如果已经绑定过微信了，那么久不可以再点击绑定按钮
    if (userInfo.OpenId != nil || ![userInfo.OpenId isEqualToString:@""]) {
        baseView.weixinBingDing.text = @"已绑定";
        
    } else {
        [baseView.weixinButton addTarget:self action:@selector(bingDingWeixin) forControlEvents:UIControlEventTouchUpInside];
        
    }
    
    if (userInfo.OpenId2 != nil || ![userInfo.OpenId2 isEqualToString:@""]) {
        baseView.QQBingDing.text = @"已绑定";
        
    } else {
        [baseView.QQButton addTarget:self action:@selector(bingDingQQ) forControlEvents:UIControlEventTouchUpInside];
        
    }
    
    
    //初始化
    provinceDic = [SmallFunctionTool haveAllProvince]; //省份的数据源始终是不变化的
    cityDic = [NSMutableDictionary dictionary];
    countyDic = [NSMutableDictionary dictionary];

}
- (void)viewWillAppear:(BOOL)animated{
    
    [super viewWillAppear:animated];
    //现在居住地
    if ([self.userInfo.ProvinceName isEqualToString:@""] || self.userInfo.ProvinceName == nil) {
        baseView.labelAddressNow.text = @"选择";
    } else {
        if ([self.userInfo.CountyName isEqualToString:@""] || self.userInfo.CountyName == nil) {
            baseView.labelAddressNow.text = [NSString stringWithFormat:@"%@ %@",self.userInfo.ProvinceName,self.userInfo.CityName];
        } else {
            baseView.labelAddressNow.text = [NSString stringWithFormat:@"%@ %@ %@",self.userInfo.ProvinceName,self.userInfo.CityName,self.userInfo.CountyName];
        }
    }
}
- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

- (void)viewDidAppear:(BOOL)animated {
    [super viewDidAppear:animated];
    
    //创建xib中的表视图，并添加到self.window中
    if (selectView != nil) {
        [selectView removeFromSuperview];
        selectView = nil;
    }
    selectView = [SelectByWindowView viewFromNIB];
    selectView.frame = CGRectMake(0, SCREEN_HEIGHT, SCREEN_WIDTH, SCREEN_HEIGHT);
    [self.view.window addSubview:selectView];
    
    
    //设置xib中的控件的操作
    [selectView.buttonGoBack addTarget:self action:@selector(allGoBackOperation:) forControlEvents:UIControlEventTouchUpInside];
    [selectView.goBackTopButton addTarget:self action:@selector(allGoBackOperation:) forControlEvents:UIControlEventTouchUpInside];
    
    //添加委托
    selectView.selTableView.delegate = self;
    selectView.selTableView.dataSource = self;
    
}
- (void)viewDidDisappear:(BOOL)animated {
    [super viewDidDisappear:animated];
    
    //停止风火轮
    [self.smallFunc stopActivityIndicator:@"PersonalInfoViewController"];
    
    if ([cityCode isEqualToString:@""] || cityCode == nil||[cityCode isEqualToString:@"(null)"])
      {
          return;
      }
        //拼接数据
        NSString *allNowAddress = nil;
        if ([county isEqualToString:@""] || county == nil) {
            allNowAddress = [NSString stringWithFormat:@"%@|%@||",provinceCode,cityCode];
        } else {
            allNowAddress = [NSString stringWithFormat:@"%@|%@|%@|",provinceCode,cityCode,countyCode];
        }
        
        //更新对应的后台方法
        NSString *method = [NSString stringWithFormat:@"UpdateUserEntity"];
        //需要的参数
        NSDictionary *dic = [NSDictionary dictionaryWithObjectsAndKeys:
                             self.userInfo.UserId,@"UserId",   //
                             @"NativePlace",@"Action", //修改类别
                             allNowAddress,@"ActionValue", //修改值
                             nil];
        [SOAPUrlSession SOAPDataWithMethod:method parameter:dic success:^(id responseObject) {
            
            //返回成功时
            NSDictionary *responseDic = responseObject;
            NSLog(@"%@ ----- %@",responseDic[@"Code"],responseDic[@"Message"]);
            
            //返回的Code字段：200-成功，300-失败，400-无数据，500-内部服务异常
            NSString *responseCode = [NSString stringWithFormat:@"%@",responseObject[@"Code"]];
            
            if ([responseCode isEqualToString:@"200"]) {
                NSLog(@"新的地址上传成功---%@",self.userInfo.HeadIcon);
                
                //更新本地数据
                self.userInfo.ProvinceId = provinceCode;
                self.userInfo.ProvinceName = province;
                self.userInfo.CityId = cityCode;
                self.userInfo.CityName = city;
                
                if ([province isEqualToString:@""] || province == nil) {
                    self.userInfo.CountyId = @"";
                    self.userInfo.CountyName = @"";
                } else {
                    self.userInfo.CountyId = countyCode;
                    self.userInfo.CountyName = county;
                }
            } else {
                
                //根据后端定义的错误编码，返回不同的提示
                NSLog(@"头像上传失败");
                
            }
        } failure:^(NSError *error) {
            //后台连接直接不成功，弹出“连接服务器失败”
            NSLog(@"网络异常：连接服务器失败");
        }];
    
    
}
/*
#pragma mark - Navigation

// In a storyboard-based application, you will often want to do a little preparation before navigation
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    // Get the new view controller using [segue destinationViewController].
    // Pass the selected object to the new view controller.
}
*/
-(void)btnImageHead:(UIButton *)sender{

    //按钮0.3秒只可以点击1次
    [SmallFunctionTool singleClickButtonRestriction:sender];
    
    //弹出动作表单
    UIAlertController *alert = [UIAlertController alertControllerWithTitle:nil message:nil preferredStyle:UIAlertControllerStyleActionSheet];
    
    //添加动作表单列表按钮
    UIAlertAction *photoButton = [UIAlertAction actionWithTitle:@"手机相册" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
        //打开手机相册
        UIImagePickerController *pickerController = [[UIImagePickerController alloc]init];
        pickerController.delegate = self;
        pickerController.allowsEditing = YES;
        pickerController.sourceType = UIImagePickerControllerSourceTypePhotoLibrary;
        //显示相册选择器picker
        [self presentViewController:pickerController animated:YES completion:nil];
        
    }];
    [alert addAction:photoButton];
    UIAlertAction *cameraButton = [UIAlertAction actionWithTitle:@"相机" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
        //打开相机
        UIImagePickerController *pickerController = [[UIImagePickerController alloc]init];
        pickerController.delegate = self;
        pickerController.allowsEditing = YES;
        pickerController.sourceType = UIImagePickerControllerSourceTypeCamera;
        [self presentViewController:pickerController animated:YES completion:nil];
        
    }];
    [alert addAction:cameraButton];
    
    
    //添加取消按钮
    UIAlertAction *cancelButton = [UIAlertAction actionWithTitle:@"取消" style:UIAlertActionStyleCancel handler:nil];
    [alert addAction:cancelButton];
    
    //使用runtime属性，修改默认的系统提示窗的字体(只支持8.4以上版本)
    CGFloat iOSVersion = [[[UIDevice currentDevice] systemVersion] floatValue];
    if (iOSVersion >=8.4) {
        [photoButton setValue:Publie_Color forKey:@"_titleTextColor"];
        [cameraButton setValue:Publie_Color forKey:@"_titleTextColor"];
        [cancelButton setValue:[UIColor darkGrayColor] forKey:@"_titleTextColor"];
    }
    
    [self presentViewController:alert animated:YES completion:nil];
}
#pragma mark UIImagePickerControllerDelegate委托方法
//相册获取结束
- (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary *)info{
    
    UIImage *image = [info objectForKey:UIImagePickerControllerEditedImage];
    
    //退出相册
    [picker dismissViewControllerAnimated:YES completion:nil];
    
    //显示对应的图片
    baseView.imageHead.image = image;
    
    
    //显示风火轮
    dispatch_async(dispatch_get_main_queue(), ^{
        [self.smallFunc createActivityIndicator:self.view AndKey:@"PersonalInfoViewController" AndOffset:64.0f];
    });
    
    //上传头像
    NSData *imageData = UIImageJPEGRepresentation(image, 0.01);
    [SOAPUrlSession SOAPDataWithMethod:@"UpLoadImg" idCode:self.userInfo.EnCode imageKey:@"HeadIcon" imageData:imageData success:^(id responseObject) {
        
        //停止风火轮
        dispatch_async(dispatch_get_main_queue(), ^{
            [self.smallFunc stopActivityIndicator:@"PersonalInfoViewController"];
        });
        
        //-------------------------------更新数据源-------------------------------
        NSDictionary *responseDic = responseObject;
        NSLog(@"%@ ----- %@",responseDic[@"Code"],responseDic[@"Message"]);
        
        //返回的Code字段：200-成功，300-失败，400-无数据，500-内部服务异常
        NSString *responseCode = [NSString stringWithFormat:@"%@",responseObject[@"Code"]];
        
        if ([responseCode isEqualToString:@"200"]) {
            
            //操作成功，接口封装返回的数据对象
            NSDictionary *dataDic = responseObject[@"Data"];
            
            //将上传的头像地址赋值给本地userInfo
            self.userInfo.HeadIcon = dataDic[@"FilePath"];
            
            
            //更新对应的后台方法
            NSString *method = [NSString stringWithFormat:@"UpdateUserEntity"];
            //需要的参数
            NSDictionary *dic = [NSDictionary dictionaryWithObjectsAndKeys:
                                 self.userInfo.UserId,@"UserId",   //
                                 @"HeadIcon",@"Action", //修改类别
                                 self.userInfo.HeadIcon,@"ActionValue", //修改值
                                 nil];
            [SOAPUrlSession SOAPDataWithMethod:method parameter:dic success:^(id responseObject) {
                
                //返回成功时
                NSDictionary *responseDic = responseObject;
                NSLog(@"%@ ----- %@",responseDic[@"Code"],responseDic[@"Message"]);
                
                //返回的Code字段：200-成功，300-失败，400-无数据，500-内部服务异常
                NSString *responseCode = [NSString stringWithFormat:@"%@",responseObject[@"Code"]];
                
                if ([responseCode isEqualToString:@"200"]) {
                    NSLog(@"新的头像上传成功---%@",self.userInfo.HeadIcon);
                } else {
                    
                    //根据后端定义的错误编码，返回不同的提示
                    NSLog(@"头像上传失败");
                    
                }
            } failure:^(NSError *error) {
                //后台连接直接不成功，弹出“连接服务器失败”
                NSLog(@"网络异常：连接服务器失败");
            }];
            
        } else {
            //根据后端定义的错误编码，返回不同的提示
            FadeAlertView *showMessage = [[FadeAlertView alloc] init];
            [showMessage showAlertWith:responseDic[@"Message"]];
        }
        
    } failure:^(NSError *error) {
        //停止风火轮
        dispatch_async(dispatch_get_main_queue(), ^{
            [self.smallFunc stopActivityIndicator:@"PersonalInfoViewController"];
        });
        //后台连接直接不成功，弹出“连接服务器失败”
        NSLog(@"请求失败");
    }];
    
    
}
//相册获取取消
- (void)imagePickerControllerDidCancel:(UIImagePickerController *)picker{
    [picker dismissViewControllerAnimated:YES completion:nil];
}
-(void)btnAddress:(UIButton *)sender{
    
    //按钮0.3秒只可以点击1次
    [SmallFunctionTool singleClickButtonRestriction:sender];
    
    //按钮0.3秒只可以点击1次
    [SmallFunctionTool singleClickButtonRestriction:sender];
    
    
    //设置标志位
    addressFlag = 0;
    
    //设置提示的Tip，第一次打开都是“选择城市”
    selectView.labelSelectTip.text = @"选择城市";
    
    //弹出tableview
    [UIView animateWithDuration:0.5 animations:^{
        
        selectView.frame = CGRectMake(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);
        
        //刷新数据
        [selectView.selTableView reloadData];
        
        dispatch_async(dispatch_get_main_queue(), ^{
            //滚动到第一行
            NSIndexPath *indexpath = [NSIndexPath indexPathForRow:0 inSection:0];
            [selectView.selTableView scrollToRowAtIndexPath:indexpath atScrollPosition:UITableViewScrollPositionNone animated:YES];
        });
    }];

    
}

#pragma mark - 更换昵称
- (void)changeNickName:(UIButton *)button {

    ChangeNickNameViewController *controller = [[ChangeNickNameViewController alloc] init];
    [self.navigationController pushViewController:controller animated:YES];
    
    // 更改昵称
    controller.changeNickNameBlock = ^(NSString *nickname){
    
        baseView.nickNameLabel.text = nickname;
    
    };

}

#pragma mark - 更换性别
- (void)changeSex:(UIButton *)button {

    ChangeSexViewController *controller = [[ChangeSexViewController alloc] init];
    [self.navigationController pushViewController:controller animated:YES];

}

#pragma mark - 省市区设置弹出的tableview的内容

//更新所有的省市区的数据源，没有对应的参数就直接给nil
- (void)updateAllDataSource:(NSString *)upProvinceCode andCityCode:(NSString *)upCityCode {
    
    //省份和城市都传空
    if (upProvinceCode == nil && upCityCode == nil) {
        //设置默认的城市和区县的数据源
        NSArray *newKeys = [provinceDic.allKeys sortedArrayUsingComparator:^NSComparisonResult (NSString *str1, NSString *str2) {
            return [str1 compare:str2];
        }];
        NSString *proCode = newKeys[0];
        
        cityDic = [NSMutableDictionary dictionaryWithDictionary:[SmallFunctionTool haveAllCity:proCode]];
        NSArray *newKeys2 = [cityDic.allKeys sortedArrayUsingComparator:^NSComparisonResult (NSString *str1, NSString *str2) {
            return [str1 compare:str2];
        }];
        NSString *citCode = newKeys2[0];
        
        countyDic = [NSMutableDictionary dictionaryWithDictionary:[SmallFunctionTool haveAllCounty:citCode]];
        
    }
    
    //传了省份，没有传城市
    if (upProvinceCode != nil && upCityCode == nil) {
        
        cityDic = [NSMutableDictionary dictionaryWithDictionary:[SmallFunctionTool haveAllCity:upProvinceCode]];
        NSArray *newKeys2 = [cityDic.allKeys sortedArrayUsingComparator:^NSComparisonResult (NSString *str1, NSString *str2) {
            return [str1 compare:str2];
        }];
        NSString *citCode = newKeys2[0];
        
        countyDic = [NSMutableDictionary dictionaryWithDictionary:[SmallFunctionTool haveAllCounty:citCode]];
        
    }
    
    //传了省份和城市
    if (upProvinceCode != nil && upCityCode != nil) {
        
        cityDic = [NSMutableDictionary dictionaryWithDictionary:[SmallFunctionTool haveAllCity:upProvinceCode]];
        
        countyDic = [NSMutableDictionary dictionaryWithDictionary:[SmallFunctionTool haveAllCounty:upCityCode]];
        
    }
    
}


#pragma mark - tableview的委托协议

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
    return 1;
}

-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section{
    
        //根据indexFlag，判断数据源
        if (addressFlag == 0) {
            //省份
            return provinceDic.count;
        } else if (addressFlag == 1) {
            //城市
            return cityDic.count;
        } else if (addressFlag == 2) {
            //区县
            return countyDic.count;
        } else {
            return 0;
        }
    
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    
    static NSString *cellID= @"SelectDetailCell";
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:cellID];
    
    if (cell == nil) {
        cell = [[UITableViewCell alloc]initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:cellID];
    }
    
    //需要显示的label
    NSString *labelStr = @"未设置";
    
        //根据indexFlag，判断数据源
        if (addressFlag == 0) { //省份
            //先根据后台id排序
            NSArray *newKeys = [provinceDic.allKeys sortedArrayUsingComparator:^NSComparisonResult (NSString *str1, NSString *str2) {
                return [str1 compare:str2];
            }];
            
            //省份编码
            NSString *proCode = newKeys[indexPath.row];
            //省份名称
            labelStr = provinceDic[proCode];
            
        } else if (addressFlag == 1) { //城市
            //先根据后台id排序
            NSArray *newKeys2 = [cityDic.allKeys sortedArrayUsingComparator:^NSComparisonResult (NSString *str1, NSString *str2) {
                return [str1 compare:str2];
            }];
            
            //市区编码
            NSString *citCode = newKeys2[indexPath.row];
            //市区名称
            labelStr = cityDic[citCode];
            
        } else if (addressFlag == 2) { //区县
            //先根据后台id排序
            NSArray *newKeys3 = [countyDic.allKeys sortedArrayUsingComparator:^NSComparisonResult (NSString *str1, NSString *str2) {
                return [str1 compare:str2];
            }];
            
            NSString *couCode = newKeys3[indexPath.row];
            //县区名称
            labelStr = countyDic[couCode];
            
        }
    
    //设置显示的内容
    cell.textLabel.text = labelStr;
    
    return cell;
    
}

//tableview点击操作，根据标志位去判断
-(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
    //解决在push，back回来之后，当前cell仍然是选中的状态
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
    
        //根据indexFlag，判断数据源
        if (addressFlag == 0) { //省份
            //先根据后台id排序
            NSArray *newKeys = [provinceDic.allKeys sortedArrayUsingComparator:^NSComparisonResult (NSString *str1, NSString *str2) {
                return [str1 compare:str2];
            }];
            
            //省份编码
            provinceCode = newKeys[indexPath.row];
            //省份名称
            province = provinceDic[provinceCode];
            
            //更新提示的tip
            selectView.labelSelectTip.text = [NSString stringWithFormat:@"%@",province];
            
            //更新市区和区县的数据源
            [self updateAllDataSource:provinceCode andCityCode:nil];
            
            //刷新tableview数据源
            addressFlag = 1;
            [selectView.selTableView reloadData];
            
        } else if (addressFlag == 1) { //城市
            //先根据后台id排序
            NSArray *newKeys2 = [cityDic.allKeys sortedArrayUsingComparator:^NSComparisonResult (NSString *str1, NSString *str2) {
                return [str1 compare:str2];
            }];
            //市区编码
            cityCode = newKeys2[indexPath.row];
            //市区名称
            city = cityDic[cityCode];
            
            
            //更新提示的tip
            selectView.labelSelectTip.text = [NSString stringWithFormat:@"%@ %@",province,city];
            
            //更新市区和区县的数据源
            [self updateAllDataSource:provinceCode andCityCode:cityCode];
            
            //刷新tableview数据源
            addressFlag = 2;
            [selectView.selTableView reloadData];
            
        } else if (addressFlag == 2) { //区县
            //先根据后台id排序
            NSArray *newKeys3 = [countyDic.allKeys sortedArrayUsingComparator:^NSComparisonResult (NSString *str1, NSString *str2) {
                return [str1 compare:str2];
            }];
            //县区编码
            countyCode = newKeys3[indexPath.row];
            //县区名称
            county = countyDic[countyCode];
            
            //显示所选城市
            baseView.labelAddressNow.text = [NSString stringWithFormat:@"%@ %@ %@",province,city,county];
            //标志位改成0
            addressFlag = 0;
            
            
            //选择后直接返回，收起tableview
            [UIView animateWithDuration:0.5 animations:^{
                
                selectView.frame = CGRectMake(0, SCREEN_HEIGHT, SCREEN_WIDTH, SCREEN_HEIGHT);
            }];
            
        }
    
}


//选择的tableview的返回按钮操作
- (void)allGoBackOperation:(UIButton *)sender {
    
    //按钮0.3秒只可以点击1次
    [SmallFunctionTool singleClickButtonRestriction:sender];
    
        //根据indexFlag，判断数据源
        if (addressFlag == 0) { //省份
            
            dispatch_async(dispatch_get_main_queue(), ^{
                
                //显示所选城市
                if ([county isEqualToString:@""] || county == nil || [city isEqualToString:@""] || city == nil || [province isEqualToString:@""] || province == nil) {
                    
                    if ([self.userInfo.CityName isEqualToString:@""] || self.userInfo.CityName == nil) {
                        baseView.labelAddressNow.text = @"选择";
                    }else
                    {
                    if ([self.userInfo.CountyName isEqualToString:@""] || self.userInfo.CountyName == nil) {
                        baseView.labelAddressNow.text = [NSString stringWithFormat:@"%@%@",self.userInfo.ProvinceName,self.userInfo.CityName];
                    } else {
                        baseView.labelAddressNow.text = [NSString stringWithFormat:@"%@%@%@",self.userInfo.ProvinceName,self.userInfo.CityName,self.userInfo.CountyName];
                    }
                    }
                    
                    //清除省份、城市和区县的数据
                    province = nil;
                    provinceCode = nil;
                    cityCode = nil;
                    city = nil;
                    countyCode = nil;
                    county = nil;
                    
                } else {
                    baseView.labelAddressNow.text = [NSString stringWithFormat:@"%@ %@ %@",province,city,county];
                }
                
                //标志位改成0
                addressFlag = 0;
                
                //直接收起tableview
                [UIView animateWithDuration:0.5 animations:^{
                    
                    selectView.frame = CGRectMake(0, SCREEN_HEIGHT, SCREEN_WIDTH, SCREEN_HEIGHT);
                }];
            });
            
        } else if (addressFlag == 1) { //城市
            
            dispatch_async(dispatch_get_main_queue(), ^{
                //更新提示的tip
                selectView.labelSelectTip.text = [NSString stringWithFormat:@"选择城市"];
                
                //更新市区和区县的数据源
                [self updateAllDataSource:provinceCode andCityCode:nil];
                
                //刷新tableview数据源
                addressFlag = 0;
                [selectView.selTableView reloadData];
                
                //清除城市和区县的数据
                cityCode = nil;
                city = nil;
                countyCode = nil;
                county = nil;
            });
            
            
        } else if (addressFlag == 2) { //区县
            
            dispatch_async(dispatch_get_main_queue(), ^{
                //更新提示的tip
                selectView.labelSelectTip.text = [NSString stringWithFormat:@"%@",province];
                
                //更新市区和区县的数据源
                [self updateAllDataSource:provinceCode andCityCode:cityCode];
                
                //刷新tableview数据源
                addressFlag = 1;
                [selectView.selTableView reloadData];
                
                //清除区县的数据
                countyCode = nil;
                county = nil;
                
            });
            
        }
    
}
//tableview的下边线顶格
-(void)viewDidLayoutSubviews
{
    if ([selectView.selTableView respondsToSelector:@selector(setSeparatorInset:)]) {
        [selectView.selTableView setSeparatorInset:UIEdgeInsetsMake(0,0,0,0)];
    }
    
    if ([selectView.selTableView respondsToSelector:@selector(setLayoutMargins:)]) {
        [selectView.selTableView setLayoutMargins:UIEdgeInsetsMake(0,0,0,0)];
    }
}
-(void)tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath
{
    if ([cell respondsToSelector:@selector(setSeparatorInset:)]) {
        [cell setSeparatorInset:UIEdgeInsetsZero];
    }
    
    if ([cell respondsToSelector:@selector(setLayoutMargins:)]) {
        [cell setLayoutMargins:UIEdgeInsetsZero];
    }
}

#pragma mark - 微信QQ绑定
- (void)bingDingWeixin {

//    //向微信注册
//    [WXApi registerApp:WX_App_ID withDescription:@"WeiXinLogin"];
//    //微信回调相关的委托，给到一个单例的WXApiManager对象
//    [WXApiManager sharedManager].delegate = self;
//    
//    if ([WXApi isWXAppInstalled]) { //判断是否安装了微信App
//        SendAuthReq *req = [[SendAuthReq alloc] init];
//        req.scope = @"snsapi_userinfo";
//        req.state = @"YYLBlaofu";
//        [WXApi sendReq:req];
//    } else {
//        UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"温馨提示"
//                                                                       message:@"请先安装微信客户端"
//                                                                preferredStyle:UIAlertControllerStyleAlert];
//        UIAlertAction *actionConfirm = [UIAlertAction actionWithTitle:@"确定" style:UIAlertActionStyleDefault handler:nil];
//        [alert addAction:actionConfirm];
//        [self presentViewController:alert animated:YES completion:nil];
//    }

    [self startBingDingThird:@"zxcvnm123456" loginWay:@"WeChat"];
    
}
- (void)bingDingQQ {

    //初始化TencentOAuth 对象 appid来自应用宝创建的应用， deletegate设置为self  一定记得实现代理方法
    //这里的appid填写应用宝得到的id  记得修改 “TARGETS”一栏，在“info”标签栏的“URL type”添加 的“URL scheme”，新的scheme。
    tencentOAuth=[[TencentOAuth alloc]initWithAppId:@"1106242768" andDelegate:self];
    
    //设置需要的权限列表，此处尽量使用什么取什么。
    permissions= [NSArray arrayWithObjects:@"get_user_info", @"get_simple_userinfo", @"add_t", nil];
    
    //点击了QQ授权
    [tencentOAuth authorize:permissions inSafari:NO];

}

#pragma mark - TencentSessionDelegate委托协议（QQ登录回调相关的方法）
//登陆完成调用
- (void)tencentDidLogin{
    //登录完成
    if (tencentOAuth.accessToken && 0 != [tencentOAuth.accessToken length]){
        //记录登录用户的OpenID、Token以及过期时间
        NSLog(@"openID=%@,token=%@",tencentOAuth.openId,tencentOAuth.accessToken);
        
        //获取用户基本信息
        [tencentOAuth getUserInfo];
        
        //注意，具体的登录方法放在了获取QQ信息的回调方法里，保证用户的信息有了才跳转
    }
    else{
        FadeAlertView *showMessage = [[FadeAlertView alloc] init];
        [showMessage showAlertWith:@"登录不成功 没有获取对应QQ相关信息"];
    }
}

//非网络错误导致登录失败：
-(void)tencentDidNotLogin:(BOOL)cancelled{
    NSLog(@"tencentDidNotLogin");
    if (cancelled){
        FadeAlertView *showMessage = [[FadeAlertView alloc] init];
        [showMessage showAlertWith:@"用户取消登录"];
    }else{
        FadeAlertView *showMessage = [[FadeAlertView alloc] init];
        [showMessage showAlertWith:@"登录失败"];
    }
}
//网络错误导致登录失败：
-(void)tencentDidNotNetWork{
    NSLog(@"tencentDidNotNetWork");
    FadeAlertView *showMessage = [[FadeAlertView alloc] init];
    [showMessage showAlertWith:@"无网络连接，请设置网络"];
    
}

//获取QQ对应信息的回调方法
-(void)getUserInfoResponse:(APIResponse *)response{
    
    //    NSLog(@"获取的QQ信息-----respons:%@",response.jsonResponse);
    
    //    NSLog(@"city:%@,gender:%@,nickname:%@",response.jsonResponse[@"city"],response.jsonResponse[@"gender"],response.jsonResponse[@"nickname"]);
    
//    externalNickname = response.jsonResponse[@"nickname"];
//    externalGender = response.jsonResponse[@"gender"];
    
    //调用后台的登录方法，根据返回来判断是否需要使用“注册”接口
    [self startBingDingThird:tencentOAuth.openId loginWay:@"QQ"];
    
}

#pragma mark - WXApiManagerDelegate
- (void)managerDidRecvLoginUserJudge:(NSString *)openId{

    // 使用openid绑定微信

}


#pragma mark - 绑定微信
- (void)startBingDingThird:(NSString *)openid loginWay:(NSString *)type{
    
    NSString *method = [NSString stringWithFormat:@"UpdateUserEntity"];
    NSDictionary *dic = [NSDictionary dictionaryWithObjectsAndKeys:
                         userInfo.UserId,@"UserId",
                         type,@"Action",   //修改信息(微信号-WeChat, QQ)
                         openid,@"ActionValue",
                         nil];
    
    [SOAPUrlSession SOAPDataWithMethod:method parameter:dic success:^(id responseObject) {
                                   
           //返回的Code字段：200-成功，300-失败，400-无数据，500-内部服务异常
           NSString *responseCode = [NSString stringWithFormat:@"%@",responseObject[@"Code"]];
           
           if ([responseCode isEqualToString:@"200"]) {
               
               
           
               dispatch_async(dispatch_get_main_queue(), ^{
                   
                   if ([type isEqualToString:@"WeChat"]) {
                       userInfo.OpenId = openid;
                       baseView.weixinBingDing.text = @"已绑定";
                       baseView.weixinButton.userInteractionEnabled = NO;
                   } else {
                       userInfo.OpenId2 = openid;
                       baseView.QQBingDing.text = @"已绑定";
                       baseView.QQButton.userInteractionEnabled = NO;
                   }
                   
                   FadeAlertView *showMessage = [[FadeAlertView alloc] init];
                   [showMessage showAlertWith:@"绑定成功"];
                   
               });
               
               
               
           } else {
           
               dispatch_async(dispatch_get_main_queue(), ^{
                   FadeAlertView *showMessage = [[FadeAlertView alloc] init];
                   [showMessage showAlertWith:@"绑定失败"];
               });
               
           }
        
       } failure:^(NSError *error) {
           
           dispatch_async(dispatch_get_main_queue(), ^{
               FadeAlertView *showMessage = [[FadeAlertView alloc] init];
               [showMessage showAlertWith:@"绑定失败"];
           });
           
       }];
    


}









































@end
