//
//  AddBankcardViewController.m
//  YiYanYunGou
//
//  Created by yongda sha on 16/10/11.
//  Copyright © 2016年 admin. All rights reserved.
//

#import "AddBankcardViewController.h"
#import "BankInfo.h"
#import "BankCollection.h"

//
#define SECTION_WIDth 88.0

@interface AddBankcardViewController ()
{
    //集合
    BankCollection *addressCollection;
    //用户信息单例
    UserInformation *userInfo;
    
    //省
    NSString *province;
    NSString *provinceCode;
    //市
    NSString *city;
    NSString *cityCode;
    
    //用来标识需要显示的tableview时对应的是哪个数据源，0-不显示数据，1-省份，2-城市，3-区县
    NSInteger flag;
    
    //键盘移动
    CGRect viewBottomFrame;
    
    //省份信息的数据源
    NSDictionary *provinceDic;
    //城市信息的数据源
    NSMutableDictionary *cityDic;
    
    NSString *BankCardMark;
  
}

@end

@implementation AddBankcardViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
    
    //初始化
    addressCollection = [BankCollection sharedInstance];
    userInfo = [UserInformation sharedInstance];
    provinceDic = [SmallFunctionTool haveAllProvince]; //省份的数据源始终是不变化的
    cityDic = [NSMutableDictionary dictionary];
    flag = 0;
    
    //真实姓名
    if ([userInfo.RealName isEqualToString:@""]||userInfo.RealName==nil) {
        _labelRealName.text=userInfo.EnCode;
    }else{
        _labelRealName.text=userInfo.RealName;
    }
    
    //弹出的省市区选择tableview
    UITableView * tableView = [[UITableView alloc]initWithFrame:CGRectMake(SECTION_WIDth, SCREEN_HEIGHT, 200, 200) style:UITableViewStylePlain];
    tableView.delegate = self;
    tableView.dataSource = self;
    //表视图去除下面多余的线
    tableView.tableFooterView = [[UIView alloc] initWithFrame:CGRectZero];
    tableView.backgroundColor=Background_Color;
    [self.view addSubview:tableView];
    self.tableView = tableView;
    
    
    //判断来源
    if (_rootFlag){
        //添加地址
        self.navigationItem.title = @"添加银行卡";
        
        //设置默认的城市和区县的数据源
        NSArray *newKeys = [provinceDic.allKeys sortedArrayUsingComparator:^NSComparisonResult (NSString *str1, NSString *str2) {
            return [str1 compare:str2];
        }];
        NSString *proCode = newKeys[0];
        
        cityDic = [NSMutableDictionary dictionaryWithDictionary:[SmallFunctionTool haveAllCity:proCode]];
        
    } else
    {
        //编辑地址
        self.navigationItem.title = @"编辑银行卡";
        
        _textBankName.text = _oldAddr.bankName;
        _textBankZH.text = _oldAddr.branch;
        province = _oldAddr.consigneeProvince;
        city = _oldAddr.consigneeCity;
        [_buttonCity setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
        [_buttonCity setTitle:[NSString stringWithFormat:@"%@",province] forState:UIControlStateNormal];
        [_cityBtn setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
        [_cityBtn setTitle:[NSString stringWithFormat:@"%@",city] forState:UIControlStateNormal];
        
        _textBankCard.text=_oldAddr.bankCard;
        
        //设置传过来的城市和区县的数据源
        NSInteger provinceIndex = 0; //省
        NSInteger cityIndex = 0; //市
        
        NSArray *newKeys = [provinceDic.allKeys sortedArrayUsingComparator:^NSComparisonResult (NSString *str1, NSString *str2)
                            {
                                return [str1 compare:str2];
                            }];
        for (NSInteger i = 0; i<newKeys.count; i++) {
            NSString *proValue = provinceDic[newKeys[i]];
            if ([proValue isEqualToString:province]) {
                provinceIndex = i;
                break;
            }
        }
        //省份编码
        provinceCode = newKeys[provinceIndex];
        cityDic = [NSMutableDictionary dictionaryWithDictionary:[SmallFunctionTool haveAllCity:provinceCode]];
        NSArray *newKeys2 = [cityDic.allKeys sortedArrayUsingComparator:^NSComparisonResult (NSString *str1, NSString *str2) {
            return [str1 compare:str2];
        }];
        for (NSInteger i = 0; i<newKeys2.count; i++) {
            NSString *cityValue = cityDic[newKeys2[i]];
            if ([cityValue isEqualToString:city]) {
                cityIndex = i;
                break;
            }
        }
    }

    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardWillShow:) name:UIKeyboardWillShowNotification object:nil];
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(keyboardWillHide:) name:UIKeyboardWillHideNotification object:nil];
    
    //给文本框添加弹出键盘时的隐藏按钮
//    {
//        UIToolbar * topView = [[UIToolbar alloc]initWithFrame:CGRectMake(0, 0, SCREEN_WIDTH,30)];
//        [topView setBarStyle:UIBarStyleBlackTranslucent];
//        
//        UIBarButtonItem * btnSpace = [[UIBarButtonItem alloc]initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:self action:nil];
//        
//        UIButton *btn = [UIButton buttonWithType:UIButtonTypeCustom];
//        btn.frame = CGRectMake(2, 5, 50, 25);
//        [btn addTarget:self action:@selector(hideKeyboard) forControlEvents:UIControlEventTouchUpInside];
//        [btn setImage:[UIImage imageNamed:@"shouqi"] forState:UIControlStateNormal];
//        UIBarButtonItem *doneBtn = [[UIBarButtonItem alloc]initWithCustomView:btn];
//        NSArray * buttonsArray = [NSArray arrayWithObjects:btnSpace,doneBtn,nil];
//        [topView setItems:buttonsArray];
//        
//        [_textBankName setInputAccessoryView:topView];
//        [_textBankZH setInputAccessoryView:topView];
//        [_textBankCard setInputAccessoryView:topView];
//        
//    }
    
    _textBankZH.clearButtonMode = UITextFieldViewModeWhileEditing;
    _textBankCard.clearButtonMode = UITextFieldViewModeWhileEditing;
    _textBankName.clearButtonMode = UITextFieldViewModeWhileEditing;

}
//根据点击手势，隐藏键盘
- (void)hideKeyboard{
    //动画时间
    [UIView animateWithDuration:0.4 animations:^{
        [self.view endEditing:YES];
    }];
}

- (void)viewDidAppear:(BOOL)animated{
    
    [super viewDidAppear:animated];
    
    //获取详细地址的textview位置，以便弹出键盘时上移内容
    viewBottomFrame = _view1.frame;
}
- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

//交互事件开始时收起键盘
-(void)touchesBegan:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event
{
    [self.view endEditing:YES];
    
    //隐藏弹出的地址信息的tableview
    [UIView animateWithDuration:0.2 animations:^{
        
        //标志位置0
       // flag = 0;
        _tableView.frame =CGRectMake(SECTION_WIDth,
                                     SCREEN_HEIGHT + 100,
                                     SCREEN_WIDTH - (_buttonCity.frame.origin.x - 15),
                                     SCREEN_HEIGHT- 60 - (_buttonCity.frame.origin.y+_buttonCity.frame.size.height));
    }];

}

/*
#pragma mark - Navigation

// In a storyboard-based application, you will often want to do a little preparation before navigation
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    // Get the new view controller using [segue destinationViewController].
    // Pass the selected object to the new view controller.
}
*/

#pragma mark - 实现text随着键盘移动
- (void)keyboardWillShow:(NSNotification *)notification {
    
    //获取键盘高度，在不同设备上，以及中英文下是不同的
    CGFloat kbHeight = [[notification.userInfo objectForKey:UIKeyboardFrameEndUserInfoKey] CGRectValue].size.height;
    
    //当前点击textfield的坐标的Y值 + 当前点击textFiled的高度 - （屏幕高度- 键盘高度 - 键盘上tabbar高度)
    CGFloat offset = viewBottomFrame.origin.y + viewBottomFrame.size.height - (SCREEN_HEIGHT - kbHeight);
    
    //取得键盘的动画时间，这样可以在视图上移的时候更连贯
    double duration = [[notification.userInfo objectForKey:UIKeyboardAnimationDurationUserInfoKey] doubleValue];
    
    //将视图上移计算好的偏移
    if(offset > 0) {
        //执行动画
        [UIView animateWithDuration:duration animations:^{
            _view1.transform = CGAffineTransformMakeTranslation(0,-offset);
        }];
    }
    
}
- (void)keyboardWillHide:(NSNotification *)notification {
    
    //动画时间
    CGFloat keyDuration = [notification.userInfo[UIKeyboardAnimationDurationUserInfoKey] floatValue];
    
    //执行动画
    [UIView animateWithDuration:keyDuration animations:^{
        _view1.transform = CGAffineTransformMakeTranslation(0,0);
    }];
    
}
//移除通知
- (void)dealloc{
    
    [[NSNotificationCenter defaultCenter] removeObserver:self name:nil object:nil];
}

#pragma mark - 省市区按钮选择
- (IBAction)btnsityClikcked:(UIButton *)sender {
    
    //隐藏可能的键盘
    [self.view endEditing:YES];
    
    //标志位给1
    flag = 1;

    //弹出tableview
    [UIView animateWithDuration:0.2 animations:^{
        
        self.tableView.frame = CGRectMake(SECTION_WIDth,
                                          102+70+51,
                                          SCREEN_WIDTH - (_buttonCity.frame.origin.x - 15),
                                          SCREEN_HEIGHT- 60 - (_buttonCity.frame.origin.y+_buttonCity.frame.size.height));
        
        [self.tableView reloadData];
        
        dispatch_async(dispatch_get_main_queue(), ^{
            
            
            NSIndexPath *indexpath = [NSIndexPath indexPathForRow:0 inSection:0];
            //滚动到第一行
            [self.tableView scrollToRowAtIndexPath:indexpath atScrollPosition:UITableViewScrollPositionNone animated:YES];
            
            
        });
        
    }];
    
    //标志位给1
    flag = 1;

}
- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
    
    return 1;
 
}
-(NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    if (flag == 1) {
        return provinceDic.count;
    } else if (flag == 2) {
        return cityDic.count;
    }  else {
        return 0;
    }
 
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    
    static NSString *cellID= @"AddressDetailCell";
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:cellID];
    
    if (cell == nil) {
        cell = [[UITableViewCell alloc]initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:cellID];
    }
    
    //获取需要的展示的城市信息
    NSString *labelStr;
    if (flag == 1) {
        //先根据后台id排序
        NSArray *newKeys = [provinceDic.allKeys sortedArrayUsingComparator:^NSComparisonResult (NSString *str1, NSString *str2) {
            return [str1 compare:str2];
        }];
        
        //省份编码
        NSString *proCode = newKeys[indexPath.row];
        //省份名称
        labelStr = provinceDic[proCode];
        
    } else if (flag == 2) {
        //先根据后台id排序
        NSArray *newKeys2 = [cityDic.allKeys sortedArrayUsingComparator:^NSComparisonResult (NSString *str1, NSString *str2) {
            return [str1 compare:str2];
        }];
        //市区编码
        NSString *citCode = newKeys2[indexPath.row];
        //市区名称
        labelStr = cityDic[citCode];
        
    }
    
    //设置显示的内容
    cell.textLabel.text = labelStr;
    
    return cell;
    
}

//点击选择省市区tableview
-(void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    
    //解决在push，back回来之后，当前cell仍然是选中的状态
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
    
    
    if (flag == 1) {
        //先根据后台id排序
        NSArray *newKeys = [provinceDic.allKeys sortedArrayUsingComparator:^NSComparisonResult (NSString *str1, NSString *str2) {
            return [str1 compare:str2];
        }];
        
        //省份编码
        provinceCode = newKeys[indexPath.row];
        //省份名称
        province = provinceDic[provinceCode];
        
        //收起tableview
        [UIView animateWithDuration:0.2 animations:^{
            //标志位置0
            flag = 0;
            
            self.tableView.frame = CGRectMake(SECTION_WIDth,
                                              SCREEN_HEIGHT + 100,
                                              SCREEN_WIDTH - (_buttonCity.frame.origin.x - 15),
                                              SCREEN_HEIGHT- 60 - (_buttonCity.frame.origin.y+_buttonCity.frame.size.height));
        }];
        
        //更新市区和区县的数据源
        [self updateAllDataSource:provinceCode andCityCode:nil];
        
    } else if (flag == 2) {
        //先根据后台id排序
        NSArray *newKeys2 = [cityDic.allKeys sortedArrayUsingComparator:^NSComparisonResult (NSString *str1, NSString *str2) {
            return [str1 compare:str2];
        }];
        //市区编码
        cityCode = newKeys2[indexPath.row];
        //市区名称
        city = cityDic[cityCode];
        
        //收起tableview
        [UIView animateWithDuration:0.2 animations:^{
            //标志位置0
            flag = 0;
            
            self.tableView.frame = CGRectMake(SECTION_WIDth,
                                              SCREEN_HEIGHT + 100,
                                              SCREEN_WIDTH - (_buttonCity.frame.origin.x - 15),
                                              SCREEN_HEIGHT- 60 - (_buttonCity.frame.origin.y+_buttonCity.frame.size.height));
        }];
        
        //更新市区和区县的数据源
        [self updateAllDataSource:provinceCode andCityCode:cityCode];
        
    }
}

- (IBAction)cityBtn:(UIButton *)sender {
    
    //隐藏可能的键盘
    [self.view endEditing:YES];
    
    //判断是否有区县信息
    if ([province isEqualToString:@""] || province == nil) {
        FadeAlertView *showMessage = [[FadeAlertView alloc] init];
        [showMessage showAlertWith:@"请先选择省份信息"];
        
        return;
        
    } else {
        
        //标志位给2
        flag = 2;
        
        //弹出tableview
        [UIView animateWithDuration:0.2 animations:^{
            
            self.tableView.frame = CGRectMake(SECTION_WIDth,
                                              153+70+53,
                                              SCREEN_WIDTH - (_cityBtn.frame.origin.x - 15),
                                              SCREEN_HEIGHT- 60 - (_cityBtn.frame.origin.y+_cityBtn.frame.size.height));
            
            [self.tableView reloadData];
            
            dispatch_async(dispatch_get_main_queue(), ^{
                NSIndexPath *indexpath = [NSIndexPath indexPathForRow:0 inSection:0];
                //滚动到第一行
                [self.tableView scrollToRowAtIndexPath:indexpath atScrollPosition:UITableViewScrollPositionNone animated:YES];
            });
        }];
    }

}

//提交
- (IBAction)btnSubmitClicked:(UIButton *)sender {
    
    //按钮不可点击
    sender.enabled = NO;
    //隐藏可能的键盘
    [self.view endEditing:YES];
    
    //校验数据
    {
        //判断网络可达性
        if (! [SOAPUrlSession SOAPReachability]){
            FadeAlertView *showMessage = [[FadeAlertView alloc] init];
            [showMessage showAlertWith:@"暂无网络，请检查网络设置"];
            sender.enabled = YES;
            return;
        }
        //非空校验
        if ([_textBankName.text isEqualToString:@""] || _textBankName.text == nil) {
            FadeAlertView *showMessage = [[FadeAlertView alloc] init];
            [showMessage showAlertWith:@"请输入银行卡名称"];
            sender.enabled = YES;
            return;
        }
        if ([_textBankName.text length]>15 ) {
            FadeAlertView *showMessage = [[FadeAlertView alloc] init];
            [showMessage showAlertWith:@"银行卡名称不能超过15个字"];
            sender.enabled = YES;
            return;
        }
        if ([_textBankCard.text length]>25 ) {
            FadeAlertView *showMessage = [[FadeAlertView alloc] init];
            [showMessage showAlertWith:@"银行卡号不能超过25个字"];
            sender.enabled = YES;
            return;
        }
        if ([_textBankZH.text length]>15 ) {
            FadeAlertView *showMessage = [[FadeAlertView alloc] init];
            [showMessage showAlertWith:@"银行卡支行名称不能超过15个字"];
            sender.enabled = YES;
            return;
        }
        if ([_textBankZH.text isEqualToString:@""] || _textBankZH.text == nil) {
            FadeAlertView *showMessage = [[FadeAlertView alloc] init];
            [showMessage showAlertWith:@"请输入银行卡支行名称"];
            sender.enabled = YES;
            return;
        }
        //省非空校验
        if ([province isEqualToString:@""] || province == nil) {
            FadeAlertView *showMessage = [[FadeAlertView alloc] init];
            [showMessage showAlertWith:@"未选取省份信息"];
            //按钮可以点击
            sender.enabled = YES;
            return;
        }
        //市非空校验
        if ([city isEqualToString:@""] || city == nil) {
            FadeAlertView *showMessage = [[FadeAlertView alloc] init];
            [showMessage showAlertWith:@"未选取城市信息"];
            //按钮可以点击
            sender.enabled = YES;
            return;
        }
        
        if ([_textBankCard.text isEqualToString:@""] || _textBankCard.text == nil)
        {
            FadeAlertView *showMessage = [[FadeAlertView alloc] init];
            [showMessage showAlertWith:@"请输入银行卡号"];
            sender.enabled = YES;
            return;
        }
        
        //防止解密崩溃
        if ([_textBankCard.text length]<=7 ) {
            FadeAlertView *showMessage = [[FadeAlertView alloc] init];
            [showMessage showAlertWith:@"请输入正确的银行卡号"];
            sender.enabled = YES;
            return;
        }
        
    }
    
    if(addressCollection.addressDic.count==0){//首次为默认
    
        BankCardMark=@"1";
    }else{
        BankCardMark=@"0";
    }
    
    //判断来源
    if (_rootFlag)
    {
        //添加
        NSString *method = [NSString stringWithFormat:@"InsertUserBankCard"];
        NSDictionary *dic = [NSDictionary dictionaryWithObjectsAndKeys:
                             self.userInfo.UserId,@"UserId", //用户编号   @"b74038d0-0ff3-432a-aa38-7c4a53a3776e"
                             _textBankName.text,@"BankName", //银行名称
                             _textBankZH.text,@"Subbranch", //开户支行
                             province,@"Province", //省份
                             city,@"City", //城市
                             _textBankCard.text,@"CardNumber", //卡号
                             BankCardMark,@"CardMark", //提现卡设置(0-否、1-是)
                             nil];
        
        //发送soap请求
        [SOAPUrlSession SOAPDataWithMethod:method parameter:dic success:^(id responseObject) {
            
            //返回成功时
            NSDictionary *responseDic = responseObject;
            NSLog(@"%@ ----- %@",responseDic[@"Code"],responseDic[@"Message"]);
            
            //返回的Code字段：200-成功，300-失败，400-无数据，500-内部服务异常
            NSString *responseCode = [NSString stringWithFormat:@"%@",responseObject[@"Code"]];
            
            if ([responseCode isEqualToString:@"200"]) {
                
                //根据后端定义的错误编码，返回不同的提示
                FadeAlertView *showMessage = [[FadeAlertView alloc] init];
                [showMessage showAlertWith:responseDic[@"Message"]];
                
                //更新本地数据
                NSDateFormatter *formatter = [[NSDateFormatter alloc]init];
                formatter.dateFormat = @"yyyy/MM/dd HH:mm:ss";
                NSString *createDate = [formatter stringFromDate:[NSDate date]];
                
                BankInfo *newAddr = [[BankInfo alloc] initWithUserId:userInfo.UserId andbankId:responseObject[@"Data"][@"BankCardId"] bankName:_textBankName.text consigneeProvince:province consigneeCity:city branch: _textBankZH.text bankCard:_textBankCard.text defaultFlag: (NSNumber*)BankCardMark createDate:createDate];
                
                [addressCollection addNewAddress:newAddr];
                
                //延时1.0秒，返回到上一界面
                dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
                    
                    [self.navigationController popViewControllerAnimated:YES];
                    
                    dispatch_async(dispatch_get_main_queue(), ^{
                        //按钮可以点击
                        sender.enabled = YES;
                    });
                });
                
            }
            else
            {
                dispatch_async(dispatch_get_main_queue(), ^{
                    //按钮可以点击
                    sender.enabled = YES;
                });
                
                    //根据后端定义的错误编码，返回不同的提示
                    FadeAlertView *showMessage = [[FadeAlertView alloc] init];
                    [showMessage showAlertWith:responseDic[@"Message"]];
            }
        } failure:^(NSError *error)
         {
             dispatch_async(dispatch_get_main_queue(), ^{
                 //按钮可以点击
                 sender.enabled = YES;
             });
             //后台连接直接不成功，弹出“连接服务器失败”
             FadeAlertView *showMessage = [[FadeAlertView alloc] init];
             [showMessage showAlertWith:@"网络异常：连接服务器失败"];
             
         }];
        
    }
    else
    {
        //编辑
        NSString *method = [NSString stringWithFormat:@"UpdateUserBankCards"];
        NSDictionary *dic = [NSDictionary dictionaryWithObjectsAndKeys:
                             _oldAddr.bankId,@"BankCardId", //主键编号
                             userInfo.UserId,@"UserId", //用户编号
                             _textBankName.text,@"BankName", //收货人
                             province,@"Province", //省份
                             city,@"City", //城市
                             _textBankZH.text,@"Subbranch",
                             _textBankCard.text,@"CardNumber",
                             _oldAddr.defaultFlag,@"CardMark", //标识(0-默认、1-收货地址)
                             nil];
        
        //发送soap请求
        [SOAPUrlSession SOAPDataWithMethod:method parameter:dic success:^(id responseObject) {
            
            //返回成功时
            NSDictionary *responseDic = responseObject;
            //返回的Code字段：200-成功，300-失败，400-无数据，500-内部服务异常
            NSString *responseCode = [NSString stringWithFormat:@"%@",responseObject[@"Code"]];
            
            if ([responseCode isEqualToString:@"200"]) {
                //弹出成功提示窗
                FadeAlertView *showMessage = [[FadeAlertView alloc] init];
                [showMessage showAlertWith:@"编辑的银行卡已经保存成功"];
                
                //更新本地数据
                BankInfo *newAddr =[[BankInfo alloc] initWithUserId:userInfo.UserId andbankId:_oldAddr.bankId bankName:_textBankName.text consigneeProvince:province consigneeCity:city branch:_textBankZH.text bankCard:_textBankCard.text defaultFlag: (NSNumber *)_oldAddr.defaultFlag createDate:_oldAddr.createDate];
                [addressCollection addNewAddress:newAddr];
                
                
                //延时1.0秒，返回到上一界面
                dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(1.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
                    
                    [self.navigationController popViewControllerAnimated:YES];
                    
                    dispatch_async(dispatch_get_main_queue(), ^{
                        //按钮可以点击
                        sender.enabled = YES;
                    });
                });
                
            } else {
                dispatch_async(dispatch_get_main_queue(), ^{
                    //按钮可以点击
                    sender.enabled = YES;
                });
                
                    //根据后端定义的错误编码，返回不同的提示
                    FadeAlertView *showMessage = [[FadeAlertView alloc] init];
                    [showMessage showAlertWith:responseDic[@"Message"]];
           
            }
        } failure:^(NSError *error) {
            dispatch_async(dispatch_get_main_queue(), ^{
                //按钮可以点击
                sender.enabled = YES;
            });
            //后台连接直接不成功，弹出“连接服务器失败”
            FadeAlertView *showMessage = [[FadeAlertView alloc] init];
            [showMessage showAlertWith:@"网络异常：连接服务器失败"];
            
        }];

    }
    
}

#pragma mark - 省市区设置弹出的tableview的内容
//更新所有的省市区的数据源，没有对应的参数就直接给nil
- (void)updateAllDataSource:(NSString *)upProvinceCode andCityCode:(NSString *)upCityCode {
    
    if (upProvinceCode == nil && upCityCode == nil) {
        //设置默认的城市和区县的数据源
        NSArray *newKeys = [provinceDic.allKeys sortedArrayUsingComparator:^NSComparisonResult (NSString *str1, NSString *str2) {
            return [str1 compare:str2];
        }];
        NSString *proCode = newKeys[0];
        
        cityDic = [NSMutableDictionary dictionaryWithDictionary:[SmallFunctionTool haveAllCity:proCode]];
        
        [_buttonCity setTitle:@"选择" forState:UIControlStateNormal];
        //[_buttonCity setTitleColor:Label_Color_A forState:UIControlStateNormal];
        
        [_cityBtn setTitle:@"选择" forState:UIControlStateNormal];
       // [_cityBtn setTitleColor:Label_Color_A forState:UIControlStateNormal];
        
    }
    
    
    if (upProvinceCode != nil && upCityCode == nil) {
        //设置默认的城市和区县的数据源
        
        cityDic = [NSMutableDictionary dictionaryWithDictionary:[SmallFunctionTool haveAllCity:upProvinceCode]];
        
        [_buttonCity setTitle:province forState:UIControlStateNormal];
       // [_buttonCity setTitleColor:Label_Color_A forState:UIControlStateNormal];
        
        [_cityBtn setTitle:@"选择" forState:UIControlStateNormal];
        //[_cityBtn setTitleColor:Label_Color_A forState:UIControlStateNormal];
        
    }
    
    if (upProvinceCode != nil && upCityCode != nil) {
        //设置默认的城市和区县的数据源
        
        cityDic = [NSMutableDictionary dictionaryWithDictionary:[SmallFunctionTool haveAllCity:upProvinceCode]];
        
        [_buttonCity setTitle:province forState:UIControlStateNormal];
       // [_buttonCity setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
        
        [_cityBtn setTitle:city forState:UIControlStateNormal];
      //  [_cityBtn setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
        
    }
}

- (IBAction)DidEndOnExit:(UITextField *)sender {
    
    //隐藏可能的键盘
   [sender resignFirstResponder];
}
@end
