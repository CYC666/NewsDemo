//
//  SearchClassifyMerchantViewController.m
//  LFBaseFrameTwo
//
//  Created by admin on 16/12/29.
//  Copyright © 2016年 admin. All rights reserved.
//

#import "SearchClassifyMerchantViewController.h"
#import <UIImageView+WebCache.h>
#import "UIButton+addproty.h"
#import "MerchantListTableViewController.h"
#import <MJRefresh.h>
#import "CoreDataTool.h"
#import "SearchKeyLocal.h"
#import "CSearchView.h"
#import "LocationServiceClass.h"

@interface SearchClassifyMerchantViewController () <UISearchBarDelegate>
{
    //用户信息单例
    UserInformation *userInfo;
    
    //工具方法单例
    SmallFunctionTool *smallFunc;
    
    //数据库操作对象
    CoreDataTool *coreDataTool;
    
    //商铺的表视图控制器
    MerchantListTableViewController *merchantListTable;
    
    //无数据时呈现的视图
    UIView *noDataView;
    
    //数据源
    NSMutableArray *rechargeRecordList;
    NSMutableArray *showRecordArray;
    //分页的页数
    NSInteger pageNum;
    
    
    //导航栏的搜索框
    //    UISearchBar *customSearchBar;
    
    CSearchView *searchView;
    
    //关键字
    NSString *moreSearchKey;

    
    //定位服务单例
    LocationServiceClass *locationService;
}
@end

@implementation SearchClassifyMerchantViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
    
    
    //初始化
    userInfo = [UserInformation sharedInstance];
    smallFunc = [SmallFunctionTool sharedInstance];
    coreDataTool = [CoreDataTool sharedInstance];
    rechargeRecordList = [NSMutableArray array];
    showRecordArray = [NSMutableArray array];
    pageNum=1;
    
    //获取本机定位信息
    locationService = [LocationServiceClass sharedInstance];

    
    //导航栏标题
    self.navigationItem.title = @"";
    
    //添加导航栏左右按钮
    UIBarButtonItem *backBar = [[UIBarButtonItem alloc] initWithImage:[UIImage imageNamed:@"back"] style:UIBarButtonItemStylePlain target:self action:@selector(popToReturnView:)];
    self.navigationItem.leftBarButtonItem = backBar;
    
    UIButton *buttonMessage = [UIButton buttonWithType:UIButtonTypeCustom];
    // [buttonMessage setImage:[UIImage imageNamed:@"查找"] forState:UIControlStateNormal];
    [buttonMessage setTitle:@"搜索" forState:UIControlStateNormal];
    [buttonMessage setTintColor:[UIColor whiteColor]];
    buttonMessage.frame = CGRectMake(0, 0, 40, 22);
//    [customSearchBar setImage:[UIImage imageNamed:@"搜索"] forSearchBarIcon:UISearchBarIconSearch state:UIControlStateNormal];
    [buttonMessage addTarget:self action:@selector(searchGoodsList:) forControlEvents:UIControlEventTouchUpInside];
    UIBarButtonItem *barMessage = [[UIBarButtonItem alloc] initWithCustomView:buttonMessage];
    self.navigationItem.rightBarButtonItem = barMessage;
    
    
    //添加商铺的表视图控制器
    CGRect tableviewFrame = CGRectMake(0, 64+60, SCREEN_WIDTH, SCREEN_HEIGHT - 64 - 60);
    merchantListTable = [self.storyboard instantiateViewControllerWithIdentifier:@"MerchantListTableViewController"];
    [merchantListTable.view setFrame:tableviewFrame];
    [self addChildViewController:merchantListTable]; //当前视图加载VC
    [self.view addSubview:merchantListTable.view];   //加载view
    
    //更新所有店铺数据
    [self refreshMerchantList:NO];
    
    //添加下拉刷新
    MJRefreshNormalHeader *header = [MJRefreshNormalHeader headerWithRefreshingBlock:^{
        
        //请求数据+刷新界面
        [self refreshMerchantList:NO];
        
        //关闭刷新
        [merchantListTable.tableView.mj_header endRefreshing];
    }];
    header.stateLabel.font = [UIFont systemFontOfSize:12];
    header.lastUpdatedTimeLabel.font = [UIFont systemFontOfSize:11];
    merchantListTable.tableView.mj_header = header;
    
    
    //上拉刷新
    MJRefreshAutoNormalFooter *footer = [MJRefreshAutoNormalFooter footerWithRefreshingBlock:^{
        
        //调用刷新方法
        [self refreshMerchantList:YES];
        
        //关闭刷新
        [merchantListTable.tableView.mj_footer endRefreshing];
    }];
    footer.automaticallyHidden = YES;//自动根据有无数据来显示和隐藏
    footer.stateLabel.font = [UIFont systemFontOfSize:12];
    merchantListTable.tableView.mj_footer = footer;
    
    
}

- (void)viewWillAppear:(BOOL)animated {
    [super viewWillAppear:animated];
    
    if (searchView) {
        [searchView removeFromSuperview];
        searchView = nil;
    }
    
    // 导航栏搜索框
    searchView = [[[NSBundle mainBundle] loadNibNamed:@"CSearchView" owner:nil options:nil] firstObject];
    searchView.searchField.placeholder = @"搜索商品";
    searchView.frame = CGRectMake(0, 0, 220, 30);
    searchView.layer.cornerRadius = 15;
    self.navigationItem.titleView = searchView;
    
    //给导航栏添加搜索框
//    if (customSearchBar) {
//        [customSearchBar removeFromSuperview];
//        customSearchBar = nil;
//    }
//    
//    //给导航栏添加搜索框
//    customSearchBar = [[UISearchBar alloc] initWithFrame:CGRectMake(60, 0, SCREEN_WIDTH-70*2, 40)];
//    customSearchBar.delegate = self;
//    customSearchBar.showsCancelButton = NO;
//    customSearchBar.searchBarStyle = UISearchBarStyleDefault;
//    customSearchBar.placeholder = @"搜索商品";
//    customSearchBar.backgroundColor = [UIColor clearColor];
//    customSearchBar.backgroundImage = [smallFunc imageWithColor:[UIColor clearColor] size:customSearchBar.bounds.size];
//    //    customSearchBar.tintColor = [UIColor redColor];
//    customSearchBar.barTintColor = [UIColor whiteColor];
//    self.navigationItem.titleView = customSearchBar;
    
    
    
    //定位服务没有开启，弹出提示
    if([CLLocationManager authorizationStatus] != kCLAuthorizationStatusAuthorizedAlways && [CLLocationManager authorizationStatus] != kCLAuthorizationStatusAuthorizedWhenInUse){
        
        UIAlertController *alert = [UIAlertController alertControllerWithTitle:@"当前页面，需要使用定位服务" message:nil preferredStyle:UIAlertControllerStyleAlert];
        UIAlertAction *cancelButton = [UIAlertAction actionWithTitle:@"取消" style:UIAlertActionStyleCancel handler:nil];
        UIAlertAction *defaultButton = [UIAlertAction actionWithTitle:@"打开定位" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
            //打开定位设置
            NSURL *settingsURL = [NSURL URLWithString:UIApplicationOpenSettingsURLString];
            [[UIApplication sharedApplication] openURL:settingsURL];
            
        }];
        
        //使用runtime属性，修改默认的系统提示窗的字体(只支持8.4以上版本)
        CGFloat iOSVersion = [[[UIDevice currentDevice] systemVersion] floatValue];
        if (iOSVersion >=8.4) {
            [cancelButton setValue:[UIColor darkGrayColor] forKey:@"_titleTextColor"];
            [defaultButton setValue:Publie_Color forKey:@"_titleTextColor"];
        }
        
        [alert addAction:cancelButton];
        [alert addAction:defaultButton];
        [self presentViewController:alert animated:YES completion:nil];
        
    }
    
}


- (void)viewDidDisappear:(BOOL)animated{
    
    [super viewDidDisappear:animated];
    
    //停止风火轮
    [smallFunc stopActivityIndicator:@"SearchClassifyMerchantViewController"];
    
    //清除搜索框
    [searchView removeFromSuperview];
    searchView = nil;
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}


#pragma mark - 私有方法

//交互事件开始时收起键盘
- (void)touchesBegan:(NSSet<UITouch *> *)touches withEvent:(UIEvent *)event
{
    //隐藏键盘方式
    [searchView.searchField endEditing:YES];
    
}

//对返回操作做特殊处理
- (void)popToReturnView:(UIBarButtonItem *)sender {
    //按钮0.3秒只可以点击1次
    [SmallFunctionTool singleClickButtonRestriction:sender];
    
    //隐藏键盘方式
    [searchView.searchField endEditing:YES];
    
    //清除搜索框
    [searchView removeFromSuperview];
    searchView = nil;
    
    [self.navigationController popViewControllerAnimated:YES];
    
}


#pragma mark - 页面交互操作
//搜索功能
- (void)searchGoodsList:(id)sender {
    
    //按钮0.3秒只可以点击1次
    [SmallFunctionTool singleClickButtonRestriction:sender];
    
    //隐藏键盘方式
    [searchView.searchField endEditing:YES];
    
    //校验数据
    {
        //搜索内容text校验，16个字
        NSString *checkSearchStr = [SmallFunctionTool checkOutText:searchView.searchField.text byType:@"0" withTextName:@"搜索内容"];
        if (checkSearchStr != nil) {
            FadeAlertView *showMessage = [[FadeAlertView alloc] init];
            [showMessage showAlertWith:checkSearchStr];
            return;
        }
    }
    
    //本地数据库添加一条本地搜索内容
    [self addSearchRecordByKey:searchView.searchField.text];
    
    //搜索数据，刷新数据源
    moreSearchKey = searchView.searchField.text;
    [self refreshMerchantList:NO];
    
}


//本地数据库添加一条本地搜索内容
- (void)addSearchRecordByKey:(NSString *)searchKey {
    
    NSDate *date=[NSDate date];
    NSDateFormatter  *dateformatter=[[NSDateFormatter alloc] init];
    [dateformatter setDateFormat:@"YYYYMMddhhmmss"];
    NSString *dateString=[dateformatter stringFromDate:date];
    SearchKeyLocal *searchLocal = [[SearchKeyLocal alloc] initWithTime:dateString searchStr:searchKey];
    
    //查询是否已经有了相同关键字的记录了
    [coreDataTool readSearchKeyLocalData];
    NSPredicate *predicateSearch = [NSPredicate predicateWithFormat:@"searchStr == %@", searchKey];
    NSArray <SearchKeyLocal *>*oldSearchArr = [coreDataTool.searchKeyLists filteredArrayUsingPredicate:predicateSearch];
    if (oldSearchArr.count > 0) {
        //删除原来的记录
        [coreDataTool deleteSearchKeyLocalData:oldSearchArr[0].searchStr];
    }
    //添加新记录
    [coreDataTool writeSearchKeyLocalData:searchLocal];
    
}


#pragma mark - UISearchBarDelegate 的委托方法
//点击了键盘上的“搜索”按钮，触发时间
- (void)searchBarSearchButtonClicked:(UISearchBar *)searchBar {
    
    //隐藏键盘方式
    [searchView.searchField endEditing:YES];
    
    //校验数据
    {
        //搜索内容text校验，16个字
        NSString *checkSearchStr = [SmallFunctionTool checkOutText:searchView.searchField.text byType:@"0" withTextName:@"搜索内容"];
        if (checkSearchStr != nil) {
            FadeAlertView *showMessage = [[FadeAlertView alloc] init];
            [showMessage showAlertWith:checkSearchStr];
            return;
        }
    }
    
    //本地数据库添加一条本地搜索内容
    [self addSearchRecordByKey:searchView.searchField.text];
    
    
    //搜索数据，刷新数据源
    moreSearchKey = searchView.searchField.text;
    [self refreshMerchantList:NO];
}




#pragma mark - 获取需要的数据源

//更新所有店铺数据
- (void)refreshMerchantList:(BOOL)isFooterRefresh {
    
    dispatch_async(dispatch_get_main_queue(), ^{
        //显示风火轮
        [smallFunc createActivityIndicator:self.view AndKey:@"SearchClassifyMerchantViewController"];
    });
    
    if (! isFooterRefresh) { //是下拉刷新
        //下拉刷新或者点击分类刷新，都需要将分页数重新设置为1
        pageNum = 1;
        [showRecordArray removeAllObjects];
        _labelTip.text = [NSString stringWithFormat:@"%@，共0家相关店铺",_classifyName];
    } else { //是上拉刷新
        //为上拉刷新，需要使用累加的分页值
        pageNum++;
    }
    
    //分页数
    NSString *paraPageNum = [NSString stringWithFormat:@"%ld",(long)pageNum];
    //关键字
    NSString *paraSearchKey;
    if ([moreSearchKey isEqualToString:@""] || moreSearchKey == nil) {
        paraSearchKey = @"default";
    } else {
        paraSearchKey = moreSearchKey;
    }
    
    
    //是否获取了定位数据
    NSString *longitudeStr; //经度
    NSString *latitudeStr; //维度
    if (locationService.latitudeStr == nil || [locationService.latitudeStr isEqualToString:@"0"]) {
        //默认无法获取定位则传@“0“
        longitudeStr = @"0";
        latitudeStr = @"0";
    } else {
        //获取到的经纬度
        longitudeStr = locationService.longitudeStr;
        latitudeStr = locationService.latitudeStr;
    }
    
    
    NSString *method = [NSString stringWithFormat:@"GetPageUser"];
    NSDictionary *dic = [NSDictionary dictionaryWithObjectsAndKeys:
                         @"默认",@"Action",   //关联角色（默认、业务、区代、省代、推荐）
                         @"default",@"UserId",
                         paraPageNum,@"PageIndex",
                         @"10",@"PageSize",
                         paraSearchKey,@"NickName",//商铺名称(搜索关键字)
                         _classifyKey,@"EntryType",//入驻类型(商铺分类)
                         longitudeStr,@"Precision",//精度
                         latitudeStr,@"Latitude",//纬度
                         @"10",@"RoleType",//用户类型(0-个人、10-商户、20-业务员、30-区代、40省代、default-所有)
                         @"0",@"AreaCode",//地址代码(商户搜索时使用，指定到市级。如不使用请传入0)
                         nil];
    
    [SOAPUrlSession SOAPDataWithMethod:method parameter:dic success:^(id responseObject) {
        
        NSDictionary *responseDic = responseObject;
        NSLog(@"GetPageUser %@ ----- %@",responseDic[@"Code"],responseDic[@"Message"]);
        
        
        //返回的Code字段：200-成功，300-失败，400-无数据，500-内部服务异常
        NSString *responseCode = [NSString stringWithFormat:@"%@",responseObject[@"Code"]];
        
        if ([responseCode isEqualToString:@"200"]) {
            //后台返回“发送成功”
            NSArray *dataArray = responseObject[@"Data"][@"rows"];
            if (dataArray.count > 0) {
                
                //存储接口返回数据
                NSMutableArray *acquireArray = [NSMutableArray array];
                
                //将数据保存到数据源
                for (NSDictionary *dic in dataArray) {
                    
                    MerchantListInfo *oneMerchant = [[MerchantListInfo alloc] initWithuserid:dic[@"userid"] nickname:dic[@"nickname"] realname:dic[@"realname"] headicon:dic[@"headicon"] mobile:dic[@"mobile"] provincename:dic[@"provincename"] cityname:dic[@"cityname"] countyname:dic[@"countyname"] address:dic[@"address"] createdate:dic[@"createdate"] consumptiontotal:dic[@"consumptiontotal"] distance:dic[@"distance"] businessHours:dic[@"businesshours"]];
                    
                    [acquireArray addObject:oneMerchant];
                    
                }
                //初始化本地数据，（0-夺宝中，对应的商品列表）
                [rechargeRecordList removeAllObjects];
                rechargeRecordList = [acquireArray mutableCopy];
            } else {
                //展示无夺宝记录的404页面
                [rechargeRecordList removeAllObjects];
                NSLog(@"当前用户无店铺列表数据");
            }
            
            
            //有正常返回结果时，就更新界面
            NSString *totalNum = [NSString stringWithFormat:@"%@",responseObject[@"Data"][@"records"]];
            dispatch_async(dispatch_get_main_queue(), ^{
                _labelTip.text = [NSString stringWithFormat:@"%@，共%@家相关店铺",_classifyName,totalNum];
            });
            
            
            if (rechargeRecordList.count > 0) {
                //数据更新过后，才调用刷新方法
                dispatch_async(dispatch_get_main_queue(), ^{
                    
                    //停止风火轮
                    [smallFunc stopActivityIndicator:@"SearchClassifyMerchantViewController"];
                    
                    //去掉无数据时的视图
                    if (noDataView) {
                        [noDataView removeFromSuperview];
                        noDataView = nil;
                    }
                    
                    //更新数据源
                    if (! isFooterRefresh) { //是下拉刷新
                        showRecordArray = [rechargeRecordList mutableCopy];
                    } else { //是上拉刷新
                        NSArray *resultArr = [rechargeRecordList copy];
                        [showRecordArray addObjectsFromArray:resultArr];
                    }
                    
                    //更新表视图控制器的数据
                    merchantListTable.showRecordArray = [NSArray arrayWithArray:showRecordArray];
                    [merchantListTable.tableView reloadData];
                    
                });
            }
        } else if ([responseCode isEqualToString:@"400"]){
            
            dispatch_async(dispatch_get_main_queue(), ^{
                //停止风火轮
                [smallFunc stopActivityIndicator:@"SearchClassifyMerchantViewController"];
                [rechargeRecordList removeAllObjects];
            });
            
            if (showRecordArray.count> 0) {
                //数据更新过后，才调用刷新方法
                dispatch_async(dispatch_get_main_queue(), ^{
                    
                    //去掉无数据时的视图
                    if (noDataView) {
                        [noDataView removeFromSuperview];
                        noDataView = nil;
                    }
                    
                    FadeAlertView *showMessage = [[FadeAlertView alloc] init];
                    [showMessage showAlertWithTwo:@"没有更多店铺列表数据啦亲！"];
                    return ;
                    
                });
            }else {
                if (! noDataView) {
                    //显示无商品时的图片
                    dispatch_async(dispatch_get_main_queue(), ^{
                        noDataView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT)];
                        noDataView.backgroundColor = [UIColor colorWithRed:245.0/255.0f green:245.0/255.0f blue:245.0/255.0f alpha:1.0f];
                        
                        //图标
                        UIImageView *noDataImage = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"暂无商铺信息"]];
                        // CGRect imageFrame =CGRectMake(0, (SCREEN_HEIGHT-SCREEN_WIDTH)/2-20, SCREEN_WIDTH, (SCREEN_WIDTH)*(276.0/750.0));
                        noDataImage.center = CGPointMake(SCREEN_WIDTH/2.0, SCREEN_HEIGHT/2.0 - 150);
                        [noDataView addSubview:noDataImage];
                        [merchantListTable.tableView addSubview:noDataView];
                    });
                }
            }
            
        } else {
            dispatch_async(dispatch_get_main_queue(), ^{
                //停止风火轮
                [smallFunc stopActivityIndicator:@"SearchClassifyMerchantViewController"];
            });
            NSLog(@"后台出现异常");
        }
        
    } failure:^(NSError *error) {
        dispatch_async(dispatch_get_main_queue(), ^{
            //停止风火轮
            [smallFunc stopActivityIndicator:@"SearchClassifyMerchantViewController"];
        });
        //后台连接直接不成功，弹出“连接服务器失败”
        NSLog(@"网络异常：连接服务器失败");
    }];
    
    
}

@end
