//
//  MessageTableViewController.m
//  LFBaseFrameTwo
//
//  Created by admin on 16/12/28.
//  Copyright © 2016年 admin. All rights reserved.
//

#import "MessageTableViewController.h"
#import "MessagePrivateInfo.h"
#import <MJRefresh.h>
#import "SOAPUrlSession.h"
#import "UserInformation.h"

@interface MessageTableViewController ()
{
    //数据源
    NSMutableArray *rechargeRecordList;
    NSMutableArray *showRecordArray;
    
    //用户信息单例
    UserInformation *userInfo;
    //工具方法单例
    SmallFunctionTool *smallFunc;
    
    //分页的页数
    NSInteger pageNum;
    
    //无数据时呈现的视图
    UIView *noDataView;
    
}
@end

@implementation MessageTableViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    
    //初始化
    userInfo = [UserInformation sharedInstance];
    smallFunc = [SmallFunctionTool sharedInstance];
    rechargeRecordList = [NSMutableArray array];
    showRecordArray = [NSMutableArray array];
    pageNum=1;
    
    //导航栏标题
    self.navigationItem.title = @"消息";
    
    
    //添加导航栏左右按钮
    if (_isPresent) {
        UIBarButtonItem *barBack = [[UIBarButtonItem alloc] initWithImage:[UIImage imageNamed:@"back"] style:UIBarButtonItemStylePlain target:self action:@selector(retuenTheView:)];
        self.navigationItem.leftBarButtonItem = barBack;
    }
    
    
    //表视图去除下面多余的线
    self.tableView.tableFooterView = [[UIView alloc] initWithFrame:CGRectZero];
    
    //iOS 8开始的自适应高度，可以不需要实现定义高度的方法
    self.tableView.estimatedRowHeight = 20;
    self.tableView.rowHeight = UITableViewAutomaticDimension;
    
    //添加下拉刷新
    MJRefreshNormalHeader *header = [MJRefreshNormalHeader headerWithRefreshingBlock:^{
        
        //请求数据+刷新界面
        [self refreshMessageData:NO];
        
        //关闭刷新
        [self.tableView.mj_header endRefreshing];
    }];
    header.stateLabel.font = [UIFont systemFontOfSize:12];
    header.lastUpdatedTimeLabel.font = [UIFont systemFontOfSize:11];
    self.tableView.mj_header = header;
    
    //上拉刷新
    MJRefreshAutoNormalFooter *footer = [MJRefreshAutoNormalFooter footerWithRefreshingBlock:^{
        
        //请求数据+刷新界面
        [self refreshMessageData:YES];
        
        //关闭刷新
        [self.tableView.mj_footer endRefreshing];
    }];
    footer.automaticallyHidden = YES;//自动根据有无数据来显示和隐藏
    footer.stateLabel.font = [UIFont systemFontOfSize:12];
    self.tableView.mj_footer = footer;
    
    //更细数据并刷新界面
    [self refreshMessageData:NO];
}

-(void)viewDidDisappear:(BOOL)animated{
    
    [super viewDidDisappear:animated];
    
    //停止风火轮
    [smallFunc stopActivityIndicator:@"MessageTableViewController"];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

#pragma mark - 私有方法
//返回上一个页面
- (void)retuenTheView:(UIBarButtonItem *)sender {

    //返回上一页
    [self dismissViewControllerAnimated:YES completion:nil];
}


//从后台获取私信消息，然后再刷新界面
- (void)refreshMessageData:(BOOL)isFooterRefresh {

    dispatch_async(dispatch_get_main_queue(), ^{
        //显示风火轮
        [smallFunc createActivityIndicator:self.view AndKey:@"MessageTableViewController"];
    });
    
    if (! isFooterRefresh) { //是下拉刷新
        //下拉刷新或者点击分类刷新，都需要将分页数重新设置为1
        pageNum = 1;
        [showRecordArray removeAllObjects];
    } else { //是上拉刷新
        //为上拉刷新，需要使用累加的分页值
        pageNum++;
    }
    
    //分页数
    NSString *paraPageNum = [NSString stringWithFormat:@"%ld",(long)pageNum];
    
    
    NSString *method = [NSString stringWithFormat:@"GetPageUserLog"];
    NSDictionary *dic = [NSDictionary dictionaryWithObjectsAndKeys:
                         userInfo.UserId,@"UserId",   //用户编号
                         paraPageNum,@"PageIndex",
                         @"10",@"PageSize",
                         nil];
    
    [SOAPUrlSession SOAPDataWithMethod:method parameter:dic success:^(id responseObject) {
        
        NSDictionary *responseDic = responseObject;
        NSLog(@"GetPageUserAccountsDetail%@ ----- %@",responseDic[@"Code"],responseDic[@"Message"]);
        
        //返回的Code字段：200-成功，300-失败，400-无数据，500-内部服务异常
        NSString *responseCode = [NSString stringWithFormat:@"%@",responseObject[@"Code"]];
        
        if ([responseCode isEqualToString:@"200"]) {
            //后台返回“发送成功”
            NSArray *dataArray = responseObject[@"Data"][@"rows"];
            if (dataArray.count > 0) {
                
                //存储接口返回数据
                NSMutableArray *acquireArray = [NSMutableArray array];
                
                //将数据保存到数据源
                for (NSDictionary *dic in dataArray) {
                    //创建数据
                    MessagePrivateInfo *oneMessage = [[MessagePrivateInfo alloc] initWithlogid:dic[@"logid"] title:dic[@"title"] content:dic[@"content"] userid:dic[@"userid"] createdate:dic[@"createdate"] readmark:dic[@"readmark"]];
                    [acquireArray addObject:oneMessage];
                    
                }
                //初始化本地数据，（0-夺宝中，对应的商品列表）
                [rechargeRecordList removeAllObjects];
                rechargeRecordList = [acquireArray mutableCopy];
            } else {
                //展示无夺宝记录的404页面
                [rechargeRecordList removeAllObjects];
                NSLog(@"当前用户无私信记录");
            }
            
            if (rechargeRecordList.count > 0) {
                //数据更新过后，才调用刷新方法
                dispatch_async(dispatch_get_main_queue(), ^{
                    
                    //去掉无数据时的视图
                    if (noDataView) {
                        [noDataView removeFromSuperview];
                        noDataView = nil;
                    }
                    
                    //更新数据源
                    if (! isFooterRefresh) { //是下拉刷新
                        showRecordArray = [rechargeRecordList mutableCopy];
                    } else { //是上拉刷新
                        NSArray *resultArr = [rechargeRecordList copy];
                        [showRecordArray addObjectsFromArray:resultArr];
                    }
                    
                    [self.tableView reloadData];
            
                });
            }
        } else if ([responseCode isEqualToString:@"400"]){
            
            [rechargeRecordList removeAllObjects];
            if (showRecordArray.count> 0) {
                //数据更新过后，才调用刷新方法
                dispatch_async(dispatch_get_main_queue(), ^{
                    
                    //去掉无数据时的视图
                    if (noDataView) {
                        [noDataView removeFromSuperview];
                        noDataView = nil;
                    }
                    
                    FadeAlertView *showMessage = [[FadeAlertView alloc] init];
                    [showMessage showAlertWithTwo:@"没有更多消息数据啦亲！"];
                    return ;
                    
                });
            }else {
                if (! noDataView) {
                    //显示无商品时的图片
                    dispatch_async(dispatch_get_main_queue(), ^{
                        noDataView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT)];
                        noDataView.backgroundColor = Background_Color;
                        
                        //图标
                        UIImageView *noDataImage = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"暂无消息"]];
                        // CGRect imageFrame =CGRectMake(0, (SCREEN_HEIGHT-SCREEN_WIDTH)/2-20, SCREEN_WIDTH, (SCREEN_WIDTH)*(276.0/750.0));
                        noDataImage.center = CGPointMake(SCREEN_WIDTH/2.0, SCREEN_HEIGHT/2.0 - 150);
                        [noDataView addSubview:noDataImage];
                        [self.view addSubview:noDataView];
                    });
                }
            }
            
        }
        dispatch_async(dispatch_get_main_queue(), ^{
            //停止风火轮
            [smallFunc stopActivityIndicator:@"MessageTableViewController"];
            NSLog(@"获取让利数据失败");
        });
        
    } failure:^(NSError *error) {
        dispatch_async(dispatch_get_main_queue(), ^{
            //停止风火轮
            [smallFunc stopActivityIndicator:@"MessageTableViewController"];
            NSLog(@"获取让利数据失败");
        });        //后台连接直接不成功，弹出“连接服务器失败”
        NSLog(@"网络异常：连接服务器失败");
    }];
    
}


#pragma mark - Table view data source

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
    return 1;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    if (showRecordArray == nil || showRecordArray.count <= 0) {
        return 0;
    } else {
        return showRecordArray.count;
    }
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"MessageInfoCell" forIndexPath:indexPath];
    
    UILabel *labelName = (UILabel *)[cell viewWithTag:1000];
    UILabel *labelTime = (UILabel *)[cell viewWithTag:1001];
    UILabel *labelContent = (UILabel *)[cell viewWithTag:1002];
    UIImageView *imagePoint = (UIImageView *)[cell viewWithTag:1003];
    
    MessagePrivateInfo *oneMessage = showRecordArray[indexPath.row];
    
    //Cell中的数据显示
    labelName.text = [NSString stringWithFormat:@"%@",oneMessage.title];
    NSString *timeText = [oneMessage.createdate substringWithRange:NSMakeRange(5, 11)]; // 03-13 14:56
    labelTime.text = [NSString stringWithFormat:@"%@",timeText];
    labelContent.text = [NSString stringWithFormat:@"%@",oneMessage.content];
    
    [labelContent sizeToFit];
    
    
    if ([oneMessage.readmark isEqualToString:@"0"]) {
        imagePoint.image = [UIImage imageNamed:@"消息4"];
    } else {
        imagePoint.image = [UIImage imageNamed:@"消息3"];
    }
    
    
    return cell;
}

//表视图控制器中某一行被点击
- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath{
    
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
    
    //将cell上的小圆点去掉
    UITableViewCell *cell = [tableView cellForRowAtIndexPath:indexPath];
    UIImageView *imagePoint = (UIImageView *)[cell viewWithTag:1003];
    imagePoint.image = [UIImage imageNamed:@"消息3"];
    

    //获取点击的私信对象
    MessagePrivateInfo *oneMessage = showRecordArray[indexPath.row];
    

    if ([oneMessage.readmark isEqualToString:@"0"])
    {
        //向后台发送已读的消息 UpdateUserLogsReadMark
        NSString *method = [NSString stringWithFormat:@"UpdateUserLogReadMark"];
        NSDictionary *dic = [NSDictionary dictionaryWithObjectsAndKeys:
                             userInfo.UserId,@"UserId",   //用户编号
                             oneMessage.logid,@"LogId",   //私信编号
                             nil];
        [SOAPUrlSession SOAPDataWithMethod:method parameter:dic success:^(id responseObject) {
            
            NSDictionary *responseDic = responseObject;
            NSLog(@"%@ ----- %@",responseDic[@"Code"],responseDic[@"Message"]);
            
            //返回的Code字段：200-成功，300-失败，400-无数据，500-内部服务异常
            NSString *responseCode = [NSString stringWithFormat:@"%@",responseObject[@"Code"]];
            
            if ([responseCode isEqualToString:@"200"]) {
                //后台返回“发送成功”
                NSLog(@"更新成功");
                
            } else {
                //根据后端定义的错误编码，返回不同的提示
                NSLog(@"获取私信信息失败");
            }
        } failure:^(NSError *error) {
            //后台连接直接不成功，弹出“连接服务器失败”
            NSLog(@"网络异常：连接服务器失败");
        }];
        
        //防止网络延时，这里私信上的红点直接去掉，不等消息返回了再去掉
        oneMessage.readmark = @"1";
    }

}


//tableview的下边线顶格
-(void)viewDidLayoutSubviews
{
    if ([self.tableView respondsToSelector:@selector(setSeparatorInset:)]) {
        [self.tableView setSeparatorInset:UIEdgeInsetsMake(0,0,0,0)];
    }
    
    if ([self.tableView respondsToSelector:@selector(setLayoutMargins:)]) {
        [self.tableView setLayoutMargins:UIEdgeInsetsMake(0,0,0,0)];
    }
}
-(void)tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath
{
    if ([cell respondsToSelector:@selector(setSeparatorInset:)]) {
        [cell setSeparatorInset:UIEdgeInsetsZero];
    }
    
    if ([cell respondsToSelector:@selector(setLayoutMargins:)]) {
        [cell setLayoutMargins:UIEdgeInsetsZero];
    }
}

@end
