//
//  HMYGGetMoneyViewController.m
//  LFBaseFrameTwo
//
//  Created by CYC on 2017/4/20.
//  Copyright © 2017年 admin. All rights reserved.
//

#import "HMYGGetMoneyViewController.h"


@interface HMYGGetMoneyViewController () {

    //工具方法单例
    SmallFunctionTool *smallFunc;
    //用户信息单例
    UserInformation *userInfo;

}

@end

@implementation HMYGGetMoneyViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    
    //初始化
    smallFunc = [SmallFunctionTool sharedInstance];
    userInfo = [UserInformation sharedInstance];
    
    self.navigationItem.title = @"收款码";
    
    [self creatCodeImage];
    
    _codeView.layer.cornerRadius = 5;
    _codeView.layer.borderWidth = 0.5;
    _codeView.layer.borderColor = CRGB(214, 214, 214, 0.5).CGColor;
    
    _yaoqingmaLabel.text = userInfo.EnCode;
    
}

#pragma mark - 生成二维码
- (void)creatCodeImage {

    NSString *urlString = [NSString stringWithFormat:@"HMYG:%@",userInfo.EnCode];
    /*使用插件生成二维码图片*/
    UIImageView *image2DCode = [[UIImageView alloc] initWithFrame:CGRectMake(0, 0, 200, 200)];
    image2DCode.image = [self create2DBarcodeByURL:urlString withSize:200];
    [_codeView addSubview:image2DCode];

}

#pragma mark - 根据url生成二维码方法
- (UIImage *)create2DBarcodeByURL:(NSString *)urlStr withSize:(CGFloat)size {
    
    // 1.创建过滤器
    CIFilter *filter = [CIFilter filterWithName:@"CIQRCodeGenerator"];
    // 2.恢复默认
    [filter setDefaults];
    // 3.给过滤器添加数据
    NSString *dataString = urlStr;
    NSData *data = [dataString dataUsingEncoding:NSUTF8StringEncoding];
    // 4.通过KVO设置滤镜inputMessage数据
    [filter setValue:data forKeyPath:@"inputMessage"];
    // 4.获取输出的二维码
    CIImage *outputImage = [filter outputImage];
    //    // 5.将CIImage转换成UIImage，并放大显示
    //    self.imageView.image = [UIImage imageWithCIImage:outputImage scale:20.0 orientation:UIImageOrientationUp];
    
    // 6.将图片转化的清晰一些
    UIImage *moreClearImage = [self createNonInterpolatedUIImageFormCIImage:outputImage withSize:size];
    
    return moreClearImage;
}
/**
 *  根据CIImage生成指定大小的UIImage
 *
 *  @param image CIImage
 *  @param size  图片宽度
 */
- (UIImage *)createNonInterpolatedUIImageFormCIImage:(CIImage *)image withSize:(CGFloat) size
{
    CGRect extent = CGRectIntegral(image.extent);
    CGFloat scale = MIN(size/CGRectGetWidth(extent), size/CGRectGetHeight(extent));
    
    // 1.创建bitmap;
    size_t width = CGRectGetWidth(extent) * scale;
    size_t height = CGRectGetHeight(extent) * scale;
    CGColorSpaceRef cs = CGColorSpaceCreateDeviceGray();
    CGContextRef bitmapRef = CGBitmapContextCreate(nil, width, height, 8, 0, cs, (CGBitmapInfo)kCGImageAlphaNone);
    CIContext *context = [CIContext contextWithOptions:nil];
    CGImageRef bitmapImage = [context createCGImage:image fromRect:extent];
    CGContextSetInterpolationQuality(bitmapRef, kCGInterpolationNone);
    CGContextScaleCTM(bitmapRef, scale, scale);
    CGContextDrawImage(bitmapRef, extent, bitmapImage);
    
    // 2.保存bitmap到图片
    CGImageRef scaledImage = CGBitmapContextCreateImage(bitmapRef);
    CGContextRelease(bitmapRef);
    CGImageRelease(bitmapImage);
    return [UIImage imageWithCGImage:scaledImage];
}







































@end
